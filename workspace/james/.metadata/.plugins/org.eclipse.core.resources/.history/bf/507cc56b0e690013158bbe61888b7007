import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

class Surface extends JPanel {

    private void doDrawing(Graphics g) {

        Graphics2D g2d = (Graphics2D) g;

        g2d.setColor(Color.blue);

        Dimension size = getSize();
        Insets insets = getInsets();

        int w = size.width - insets.left - insets.right;
        int h = size.height - insets.top - insets.bottom;
        
        File file = null;
		FileReader fr = null;
		LineNumberReader lnr = null;
		String file1 = "/Users/anjinliu/Desktop/experiment_datasets/gaussian_data/raw1.csv";
		double max=0;
		double min=30;
		double raw_value;
		
		try {
			file = new File(file1);
			fr = new FileReader(file);
			lnr = new LineNumberReader(fr);
			String line = "";

			while ((line = lnr.readLine()) != null) {
				
				raw_value = Double.parseDouble(line.split(";")[1]);
				if(max < raw_value){
					max = raw_value;
				}
				if(min > raw_value){
					min = raw_value;
				}
				
//				if (line.toLowerCase().contains(args[0].toLowerCase())) {
//					
//				}
			}

			fr.close();
			lnr.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//        Random r = new Random();
//
//        for (int i = 0; i < 1000; i++) {
//
//            int x = Math.abs(r.nextInt()) % w;
//            int y = Math.abs(r.nextInt()) % h;
//            g2d.drawLine(x, y, x, y);
//        }
    }

    @Override
    public void paintComponent(Graphics g) {

        super.paintComponent(g);
        doDrawing(g);
    }
}

public class Points extends JFrame {

    public Points() {

        initUI();
    }

    private void initUI() {
        
        setTitle("Points");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        add(new Surface());

        setSize(1000, 1000);
        setLocationRelativeTo(null);
    }

    public static void main(String[] args) {

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                Points ps = new Points();
                ps.setVisible(true);
            }
        });
    }
}